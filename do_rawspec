#! /bin/csh

# do_rawspec top_data_dir [hostname_override]

# scan for all .raw files under top_data_dir and run rawspec on all possible data

# if we aren't observing (as dictated by the contents of file $OBSERVINGSTATUS) and
#    we aren't already running (as dictated by the existence of $HOSTRUNNING trigger file) then
#    * fire off a rawspec loop on all potential raw data (basically ever observation that starts with *.0000.raw)
#      * check to see if $TRIGGER exists (human may create it to stop all rawspecs) - if so, exit
#      * run rawspec with parameters based on 2 or 8 bit data, and block size of raw data
#      * if no "DIAG" string found in the path, check file sized of .h5 products - if sane, delete .raw files
#

##### PARKES/cuda-8.0
setenv PATH /usr/local/cuda-8.0/bin:$PATH
setenv LD_LIBRARY_PATH /usr/local/cuda-8.0/lib64:/usr/local/listen/lib

set TRIGGER = /home/obs/triggers/stop_rawspec
# set TRIGGER = /home/obs/triggers/stop_rawspec_NOT_REALLY # uncomment this is you want it to run whenever

set OBSERVINGSTATUS = /home/obs/triggers/observation_status

set RAWSPECEXE = /usr/local/bin/rawspec
# set RAWSPECEXE = /home/obs/bin/rawspec_wrapper

set TMPFILE = /tmp/rawspec.tmp.$$

set TWOBITBLOCKSIZE = 33069312

if (x == x$1) then
  echo "which root directory?"
  exit 1
endif

if (x == x$2) then
  set HOSTNAME = `hostname`
else 
  set HOSTNAME = $2
endif

set ISCRON = "no"

set THISDIR = `pwd`

set HOSTRUNNING = /home/obs/triggers/rawspec_${HOSTNAME}_running

# NEW - chown everything to obs:obs under root directory and remove other writeability

cd /datax/dibas # default in case the following below fails
cd $1
chown -R obs:obs *
chmod -R o-w *

# check if host running 

if (-f $HOSTRUNNING) then
  # only report if not in a cron job (otherwise log will get noisy)
  if ($ISCRON == "no") then 
    echo "rawspec is already running on host $HOSTNAME - exiting..."
    echo "remove triggerfile: $HOSTRUNNING if you feel this is bogus"
    echo " "
    echo "output of pgrep -fl rawspec:"
    echo " "
    pgrep -fl rawspec
  endif
  exit 1
endif

touch $HOSTRUNNING

foreach i (`find $1 -name "*guppi*raw" -print | sed 's/.[0-9][0-9][0-9][0-9].raw//' | sort | uniq`)

  if (-f $TRIGGER) then
    echo "stopping because triggerfile: $TRIGGER exists..."
    rm $HOSTRUNNING
    exit 0
  endif

  cd $THISDIR

  set BASENAME = `basename $i`
  set DIRNAME = `dirname $i`

  cd $DIRNAME

  echo $i
  echo =====================================================================

  set START = `date '+%s'`
  echo -n "starting: "
  date

  set GSERROR = 0

  set BITS = 8
  set TWOBIT = `ls ${BASENAME}.[0-9][0-9][0-9][0-9].raw |& grep -c "_2bit"`
  if ($TWOBIT > 0) then
    set BITS = 2
  endif
  echo "setting bit depth to $BITS"

  # is the a _999_ set? 1 = yes, 0 = no 
  # set ISBL = `fold -w 80 *raw | head -80 | grep -a PROJID | grep -c _999_`
  set ISBL = `/home/obs/bin/is_bl_session $i | grep -c yes`

  set BLOCSIZE = `fold -w 80 *raw | head -80 | grep -a BLOCSIZE | awk '{print $2}'`
  echo BLOCSIZE : $BLOCSIZE
  # original version if BLOCSIZE = 132251648
  set PRODUCTS = "-f 1033216,8,1024 -t 51,128,3027"
  if ($BLOCSIZE == 134217728) then
    set PRODUCTS = "-f 1048576,8,1024 -t 51,128,3072"
#    set PRODUCTS = "-f 1048576,8,1024 -t 3,128,3072" # for one second high freq resolution!
  endif
  if ($BLOCSIZE == 129499136) then
    set PRODUCTS = "-f 999424,8,1024 -t 51,128,2928"
  endif

  if ( (-f ${BASENAME}.rawspec.0000.h5 && ! -z ${BASENAME}.rawspec.0000.h5) || (-f ${BASENAME}.rawspec.0000.fil && ! -z ${BASENAME}.rawspec.0000.fil) ) then
    echo ".h5/.fil files exist - already reduced - skipping fixup/rawspec..."
  else 

    /usr/local/bin/bl_fixup.rb ${BASENAME}.[0-9][0-9][0-9][0-9].raw |& tee $TMPFILE
    if ($status == 1) then
      echo "error during fixup..."
      foreach BADFILE (`awk '$3=="error" {print $1}' $TMPFILE`)
        # mv $BADFILE bad_${BADFILE}.corrupted_headers 
        echo DEBUG - not actually doing: mv $BADFILE bad_${BADFILE}.corrupted_headers 
      end
    endif

    numactl --cpunodebind 1 $RAWSPECEXE -j $i $PRODUCTS -H # -j is new: make h5 files!

    if ($status == 1) then
      echo "error during rawspec..."
      set GSERROR = 1
    endif

    echo -n "ending: "
    date

  endif # already rawspec'ed

  set BLOCKDIV = `echo $TWOBITBLOCKSIZE $BITS | awk '{printf("%d\n",($1/2)*$2)}'`

  set NUMBLOCKS = `ls -l ${BASENAME}.[0-9][0-9][0-9][0-9].raw | awk '{ total += $5 }; END { printf("%d\n",(total/'$BLOCKDIV')) }' `
  echo "number of guppi_daq blocks in file set: $NUMBLOCKS"

  # these are set to approx 60% the filterbank numbers
  set EXPECTED0 = 1000000 
  set EXPECTED1 = 60000
  set EXPECTED2 = 24000 

  set SIZE0 = `ls -l ${BASENAME}.rawspec.0000.h5 |& awk '{printf("%d\n", ($5 / '$EXPECTED0') )}'`
  set SIZE1 = `ls -l ${BASENAME}.rawspec.0001.h5 |& awk '{printf("%d\n", ($5 / '$EXPECTED1') )}'`
  set SIZE2 = `ls -l ${BASENAME}.rawspec.0002.h5 |& awk '{printf("%d\n", ($5 / '$EXPECTED2') )}'`

  if ($SIZE0 == "No") then
    set SIZE0 = 0
  endif
  if ($SIZE1 == "No") then
    set SIZE1 = 0
  endif
  if ($SIZE2 == "No") then
    set SIZE2 = 0
  endif

  echo "low estimation of bytes per block in .h5 files: $EXPECTED0 $EXPECTED1 $EXPECTED2"
  echo "approx num blocks in .h5 files (divided by block size): $SIZE0 $SIZE1 $SIZE2" 
  echo "actual .h5 files:"
  ls -l ${BASENAME}.rawspec.000?.h5

  echo "also checking status of h5ls FILENAME.h5/data for corruption"
  echo h5ls ${BASENAME}.rawspec.0000.h5/data
  h5ls ${BASENAME}.rawspec.0000.h5/data
  set CORRUPT0 = $status
  echo h5ls ${BASENAME}.rawspec.0001.h5/data
  h5ls ${BASENAME}.rawspec.0001.h5/data
  set CORRUPT1 = $status
  echo h5ls ${BASENAME}.rawspec.0002.h5/data
  h5ls ${BASENAME}.rawspec.0002.h5/data
  set CORRUPT2 = $status

  if ( ($GSERROR == 0) && ($SIZE0 > $NUMBLOCKS) && ($SIZE1 > $NUMBLOCKS) && ($SIZE2 > $NUMBLOCKS) && ($CORRUPT0 == 0) && ($CORRUPT1 == 0) && ($CORRUPT2 == 0) ) then
    set CHECKNAME = `echo ${i} | grep -ci 'DIAG'`
    if ($CHECKNAME == 0) then
      if ($ISBL == 1) then 
        echo ".h5 files are big enough - deleting the following .raw files:"
        ls -l ${BASENAME}.[0-9][0-9][0-9][0-9].raw |& tee ${BASENAME}.raw_files_deleted
        # echo "SPECIAL CASE: NOT DELETING TO BE SAFE"
        /bin/rm -f ${BASENAME}.[0-9][0-9][0-9][0-9].raw
      else 
        echo "Not a _999_ source - not deleting!"
      endif
    else 
      echo "DIAG source - not deleting!"
    endif
    set CHECKNAME = `echo ${BASENAME} | grep -c '^blc[0-9]'`
    if ($CHECKNAME == 0) then
      echo "renaming guppi_ files to add blcXY prefix:"
      foreach j (`ls ${BASENAME}*`)
        set NEWNAME = ${HOSTNAME}_$j
        echo mv $j $NEWNAME
        mv $j $NEWNAME
      end
    endif
    # ALL DONE - create this file to let everybody know (note checkname still being used from above "blc" check)
    if ($CHECKNAME == 0) then
      touch ${HOSTNAME}_${BASENAME}.rawspec.done
    else
      touch ${BASENAME}.rawspec.done
    endif
  else
    echo "not deleting/renaming .raw files due to error (.h5 files are missing or not big enough)!"
  endif

  set END = `date '+%s'`
  set DIFF = `echo $START $END | awk '{print $2-$1}'`
  echo number of total seconds: $DIFF
  echo ====================================

end

# no more files - show's over - remove running trigger and exit
rm $HOSTRUNNING
