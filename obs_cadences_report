#! /usr/bin/env perl

@inputdata = `/home/obs/bin/obs_get_all_targets`;
$hostsrunning = `cat /home/obs/triggers/hosts_running`;
chomp $hostsrunning;
@allhosts = (split /\s+/, $hostsrunning);
$hostcount = 0;

foreach $thisline (@inputdata) { $targets[$count++] = (split /\s+/, $thisline)[0]; }

for ($i = 0; $i < $count; $i++) { $justtargets[$i] = $targets[$i]; $justtargets[$i] =~ s/_[0-9][0-9][0-9][0-9]$//; } # clean of scan #s

for ($i = 0; $i < $count; $i++) {
  if ( $justtargets[$i] ne $justtargets[$i+1] &&
       $justtargets[$i] eq $justtargets[$i+2] &&
       $justtargets[$i] ne $justtargets[$i+3] &&
       $justtargets[$i] eq $justtargets[$i+4] &&
       $justtargets[$i] ne $justtargets[$i+5]) {
    $cadence{$targets[$i]} .= "A";
    $cadence{$targets[$i+1]} .= "B";
    $cadence{$targets[$i+2]} .= "A";
    $cadence{$targets[$i+3]} .= "C";
    $cadence{$targets[$i+4]} .= "A";
    $cadence{$targets[$i+5]} .= "D";
    $cadencecount++;
    } 
  }

print "                   target_scan cad  nd minutes recorded on each blc\n";
#print "                                        00  01  02  03  04  05  06  07  10  11  12  13  14  15  16  17  20  21  22  23  24  25  26  27  30  31  32  33  34  35  36  37\n";
print "                                       ";
foreach $thishost (@allhosts) {
  $thishost =~ s/blc//;
  print "$thishost ";
  }
print "\n";

#print "------------------------------ ---- -- -------------------------------------------------------------------------------------------------------------------------------\n";
print "------------------------------ ---- --";
foreach $thishost (@allhosts) {
  $thishost =~ s/blc//;
  if ($hostcount == 0) { print " --"; } else { print "---"; }
  $hostcount++;
  }
print "\n";

foreach $thisline (@inputdata) {
  chomp $thisline;
  @splitline = split /\s+/, $thisline;
  printf("%30s ",$splitline[0]); # target
  printf("%3s ",$cadence{$splitline[0]}); # candences
  printf("%3d ",$splitline[1]); # node count
  $totalmins = 0;
  $maxmins = 0;
  for ($i = 0; $i < $hostcount; $i++) {
    $thisval = $splitline[2+$i];
    if ($thisval eq "0.0" ) { print "-- "; } 
    else {
      $thisval =~ s/\.//;
      printf("%s ",$thisval);
      }
    $totalmins+=$splitline[2+$i];
    if ($splitline[2+$i] > $maxmins) { $maxmins = $splitline[2+$i]; }
    }
  $totalmaxmins+=$maxmins;
  $totalaveragemins+=($totalmins/$splitline[1]);
  print "\n";
  }

print "\n";
$laststart = `grep "blctl start" /home/obs/logs/blctl.log | tail -1 | awk '{print \$1,\$2}'`;
$laststop = `grep "blctl stop" /home/obs/logs/blctl.log | tail -1 | awk '{print \$1,\$2}'`;
$starttime = `/home/obs/bin/strtotime $laststart`;
$stoptime = `/home/obs/bin/strtotime $laststop`;
chomp $laststart; chomp $laststop; chomp $starttime; chomp $stoptime;
# print "$laststart $starttime $laststop $stoptime\n";
$obslength = $stoptime - $starttime;
$obslengthhours = sprintf("%0.3f",$obslength/3600);

print "observation length (time between last blctl start/stop): $obslength seconds\n";
print "number of targets: $count\n";
print "full cadences: $cadencecount\n";
print "total minutes observed: $totalmaxmins\n";
if ($totalmaxmins > 0) { $quality = sprintf("%0.3f",($totalaveragemins/$totalmaxmins)*100.0); } else { $quality = 0; }
print "recording quality: $quality" . '%' . " (accounting for some nodes dropping blocks) \n";
$efficiency = sprintf("%0.3f",($totalmaxmins/($obslength/60))*100);
print "efficiency (given $obslength second ($obslengthhours hour) observation): $efficiency" . '%' . "\n";

