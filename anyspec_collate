#! /bin/tcsh

set OBSERVINGSTATUS = /home/obs/triggers/observation_status

# set to 1 to delete original files
# set DELETEORIGFILES = 0
set DELETEORIGFILES = 1

if (-f $OBSERVINGSTATUS) then
  if (`cat $OBSERVINGSTATUS` == "off") then
    set NOW = `date '+%s'`
    set FILETIME = `/bin/ls -l --time-style="+%s" $OBSERVINGSTATUS | awk '{print $6}'`
    set DELTA = `echo $NOW $FILETIME | awk '{print $1-$2}'`
    if ($DELTA > 60) then # half hour safe enough?
      echo "safe to run since we haven't been observing for 10 minutes..."
    else
      echo "observing stopped less than 10 minutes ago.. not safe yet...."
      exit 0
    endif
  else
    echo -n "not running because we are currently observing (or too soon after stopping)... "
    date
    exit 0
  endif
endif

if (x == x$2) then
  echo "anyspec_collate guppi_root_name collate_dir [safe]"
  echo '   (extra keyword "safe" at the end prevents looking in blcXY:/datax directories'
  echo '    and thus not interfere with any current observations)'
  exit 1
endif

set INFILE = $1

set TMPFILE = /tmp/anyspec_collate.tmp.$$

# check for disk space:

set SPACE = `df -P $2 | tail -1 | awk '{print $5}' | sed 's/%//'`
if ($SPACE > 98) then
  echo "WARNING: not enough space in $2 - exiting..."
  exit 1
endif

echo -n "starting: "
date
set START = `date '+%s'`

cat /dev/null > $TMPFILE

set SAFESUFFIX=""
if (x == xsafe) then
  set SAFESUFFIX="/datax2"
endif

foreach i (`find /mnt_blc*${SAFESUFFIX} /mnt_bls*/datax*/dibas_data -name 'blc*'$INFILE'*' -print | grep -v '.raw$' | grep -v 'spliced_' | grep -v 'processing_hub' | grep -v 'dibas.[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].broken'`) 
  echo "retrieving: $i"
  echo $i >> $TMPFILE
end

cd $2

set SESSIONID = "blank"
foreach PATHELEMENT (`grep $INFILE $TMPFILE | grep spec.0000.fil | head -1 | sed 's/\// /g'`)
  set COUNT = `echo $PATHELEMENT | grep -c '[A,T]GBT[0-9][0-9][A,B]'`
  if ($COUNT == 1) then
    set SESSIONID = $PATHELEMENT
  endif
end
if ($SESSIONID == "blank") then
  echo "can't figure out session id - exiting..."
  /bin/rm $TMPFILE
  exit 2
endif

mkdir $SESSIONID >& /dev/null
chmod 775 $SESSIONID
chgrp bl $SESSIONID
chmod g+s $SESSIONID
cd $SESSIONID

echo "getting splice order..."
set ORDERTMP = /tmp/splice_order_collate.tmp.$$
/home/obs/bin/splice_order $INFILE > $ORDERTMP
set SPLERROR = `grep -ci "fatal error" $ORDERTMP`
if ($SPLERROR == 1) then
  cat $ORDERTMP
  echo "exiting anyspec_collate because this is really bad..."
  /bin/rm $ORDERTMP
  /bin/rm $TMPFILE
  exit 0
endif

set THISORDER = `cat $ORDERTMP | awk '{printf("%s ",$1)}'`
set NODES = ""
foreach NODE (`grep $INFILE $TMPFILE | grep spec.0000.fil | awk -F/ '{print $NF}' | sed 's/blc//' | sort -n | uniq | awk -F_ '{printf("%s\n",$1)}'`)
  set FOUND = `grep -c '^'$NODE' ' $ORDERTMP`
  set THISNODE = $NODE
  if ($FOUND == 0) then
    set THISNODE = `echo $NODE | sed 's/[0-9]/o/'` # set first digit to "o" if overlap
  endif
  set NODES = ${NODES}${THISNODE}
end
/bin/rm $ORDERTMP

echo these nodes '('including overlaps')': $NODES
echo actual order: $THISORDER

set DELETE = 1
foreach i (.gpuspec.0000.fil .gpuspec.0001.fil .gpuspec.0002.fil .rawspec.0000.fil .rawspec.0001.fil .rawspec.0002.fil)
  set ARETHEREANY = `grep -c blc${THISNODE}_${INFILE}${i} $TMPFILE`
  set THESEFILES = ""
  foreach THISNODE ($THISORDER)
    # echo blc${THISNODE}_${INFILE}${i}
    set NEXTFILE = `grep blc${THISNODE}_${INFILE}${i} $TMPFILE`
    set THESEFILES = "$THESEFILES $NEXTFILE"
  end
  if ($ARETHEREANY > 0) then
    set OUTPUTFILE = spliced_blc${NODES}_${INFILE}${i}
    if (-f $OUTPUTFILE) then
      echo "$OUTPUTFILE exists - skipping..."
    else
      echo "splicing $i files : "
      echo command: /usr/local/sigproc/bin/splice2 $THESEFILES -o $OUTPUTFILE
      /usr/local/sigproc/bin/splice2 $THESEFILES -o spliced_blc${NODES}_${INFILE}${i}
      if (! -s spliced_blc${NODES}_${INFILE}${i}) then
        echo "empty file created - deleting it..."
        rm spliced_blc${NODES}_${INFILE}${i}
      else 
        set CSTMP = /tmp/check_splice.tmp.$$
        /home/obs/bin/check_splice_sizes $THESEFILES spliced_blc${NODES}_${INFILE}${i} > $CSTMP
        echo -n "check splice output: "
        cat $CSTMP
        set CHECKSPLICE = `cat $CSTMP | awk '{print $1}'`
        /bin/rm $CSTMP
        if ($CHECKSPLICE == "bad") then
          echo "splice too small - deleting it..."
          rm spliced_blc${NODES}_${INFILE}${i}
          set DELETE = 0
        else
          echo "(done)"
        endif # bad resulting splice
      endif # empty file created
    endif # outputfile exists
  endif # are there any to splice?
end 

if ($DELETE == 0) then
  echo "problems creating spliced files:" # NOTE: other processes may look for this message in the output
  ls -l spliced_blc${NODES}_${INFILE}*
  echo "will not delete originals..."
endif

echo "final set of spliced files:"
ls -l spliced_blc${NODES}_${INFILE}*
echo "deleting originals:"
foreach i (.gpuspec.0000.fil .gpuspec.0001.fil .gpuspec.0002.fil .rawspec.0000.fil .rawspec.0001.fil .rawspec.0002.fil)
  set ARETHEREANY = `grep -c blc${THISNODE}_${INFILE}${i} $TMPFILE`
  set THESEFILES = ""
  foreach FILE (`grep ${INFILE}${i} $TMPFILE`)
    set THESEFILES = "$THESEFILES $FILE"
  end
  if ($ARETHEREANY > 0) then
    echo command: /bin/rm $THESEFILES
    if ($DELETEORIGFILES == 1 && $DELETE == 1) then
      /bin/rm $THESEFILES
    else 
      echo "DELETEORIGFILES is set to 0 - not actually deleting..."
    endif
  endif
end

echo -n "ending: "
date
set END = `date '+%s'`
set SECONDS = `echo $START $END | awk '{print $2-$1}'`
echo "total: $SECONDS seconds"

/bin/rm $TMPFILE
